2013.7.31
---------

After discussion with Craig, Jeff added the following:

- If the major thing that this package provides is library routines in
  python (and perl; see below) of all the MPI Fortran interfaces, that
  would be Awesome.  The use case here is that then Open MPI and MPICH
  and ...whoever_else... can write an application that uses these
  library routines to emit whatever they want to emit.  For example:

  -----
  $ cat ompi_generate_fortran.pl
  #/usr/bin/env perl

  import craig_and_sorens_fortran_tree;

  foreach my $interface (%the_tree) {
     ...output stuff the way OMPI wants to output it...
  }
  ----

  In general, OMPI needs the following:
  - accept parameters from OMPI's configure script about the Fortran
    compiler, such as:
      - what type to use for choice buffers (assumed rank, assumed
        shape, or one of several ignore tkr variants)
      - whether the compiler supports "abstract" or not
      - whether the compiler supports "asynchronous" or not
      - whether the compiler supports "optional" or not
      - whether the compiler supports "private" or not
      - whether the compiler supports "procedure" or not
  - emit mpif.h
  - emit mpi module interfaces
  - emit mpi_f08 module interfaces
  - emit MPI implementation files for mpif.h and mpi module
      - possibly also emit PMPI implementations
  - emit MPI implementation files for mpi_f08 module
      - possibly also emit PMPI implementations

  The idea here is that MPICH might want something very different.
  And tools people will also want something very different than both
  OMPI and MPICH.

  ...but if we all have a tree representing all the MPI Fortran
  interfaces and constants (and perhaps some helper functions to
  iterate through this tree), then we're all starting from the same
  sheet of music, and things will be much, much better for the whole
  MPI community.

  My point: I think it is not possible to have a one-size-fits-all
  tool that will work for OMPI, MPICH, Cray MPI, ...etc. and all the
  tools.  So the focus should be (IMHO) making a back-end library
  interface that all of these entities (OMPI, MPICH, tools, ...etc.)
  can use.

- OMPI has the unfortunate requirement that all generation code must
  be in Perl (I'm sorry!  I argued for Python because of this work,
  but failed).  

  Craig thinks that he can have meta-tree code in Python that emits
  both craig_and_sorens_fortran_tree.pm (perl) and
  craig_and_sorten_fortran_tree.py -- i.e., one code base that emits
  both Python and Perl, and that emitted code is what others use.
